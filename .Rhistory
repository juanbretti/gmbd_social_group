# Nat King Cole
filter_idx <- match("Enrique Iglesias", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Ricky Martin', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
short <- all_shortest_paths(g, from='Enrique Iglesias', to = 'Kiss', mode = "all")
short$res[[1]]
g1 <- induced_subgraph(g, V(g)$name = 'Enrique Iglesias')
g1 <- induced_subgraph(g, V(g)$name == 'Enrique Iglesias')
plot)g1
plot(g1)
g1 <- induced_subgraph(g, V(g)$name %in% short$res[[1]])
plot(g1)
V(g)$name %in% short$res[[1]]
g1 <- induced_subgraph(g, short$res[[1]])
plot(g1)
View(data_artist)
short <- all_shortest_paths(g, from='Enrique Iglesias', to = 'Wolfgang Amadeus Mozart', mode = "all")
g1 <- induced_subgraph(g, short$res[[1]])
plot(g1)
top_betweenness <- head(sort(bt, decreasing=TRUE), 10)
bt <- betweenness(g, normalized=TRUE)
data_music
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
data_music %>%
dplyr::filter(grepl(',', artist_names))
aa <- data_music %>%
dplyr::filter(grepl(',', artist_names))
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id) %>%
dplyr::filter(grepl(',', artist_names))
aa <- data_music %>%
dplyr::filter(grepl(',', artist_names))
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names)
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names)
aa
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names)
aa
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
select(`artist_names`, `artists_id`) %>%
distinct() %>%
unnest(artists_id, artist_names)
aa <- data_music %>%
dplyr::filter(grepl(',', artist_names)) %>%
select(`artist_names`, `artists_id`) %>%
distinct()
aa
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names)
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names, keep_empty=FALSE)
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artist_names)
aa %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id, artist_names)
install.packages("networkD3")
library(networkD3)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
library(networkD3)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
# network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
# network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
network.D3$links$Width <- 10*E(network)$width
library(networkD3)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
# network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
# network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
# network.D3$links$Width <- 10*E(network)$width
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
# Group = 'Group',
opacity = 0.9,
Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network.D3
library(networkD3)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
# network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
# network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
# network.D3$links$Width <- 10*E(network)$width
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
# Group = 'Group',
opacity = 0.9,
# Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
library(networkD3)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
# network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
network.D3$nodes %<>% mutate(Group = 1)
library(networkD3)
library(magrittr)
# Treshold
threshold <- 80
network <- g
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
# network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
# network.D3$links$Width <- 10*E(network)$width
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
# Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
library(networkD3)
library(magrittr)
# Treshold
threshold <- 80
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
network.D3$links$Width <- 10*E(network)$width
E(network)$width
E(network)
library(networkD3)
library(magrittr)
# Treshold
threshold <- 80
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes %<>% mutate(Degree = (1E-2)*V(network)$degree)
# Define color group (I will explore this feature later).
network.D3$nodes %<>% mutate(Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
# Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
# Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
V(network)
V(network)
V(network)$degree
g_ego
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
g_ego
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_artist)
data_influence <- read_csv('data/influence_data.csv')
View(data_influence)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv', encoding)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_influence)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id) %>%
dplyr::filter(grepl(',', artist_names))
aa <- data_music %>%
dplyr::filter(grepl(',', artist_names)) %>%
select(`artist_names`, `artists_id`) %>%
distinct()
# aa %>%
#   transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
#             artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
#   unnest(artists_id, artist_names)
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=3)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_artist$PC2 <- predict(tranformation_1, data)[['PC2']]
data_artist$PC3 <- predict(tranformation_1, data)[['PC3']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = dist(matrix(c(`PC1_influencer`, `PC1_follower`, `PC2_influencer`, `PC2_follower`, `PC3_influencer`, `PC3_follower`), nrow = 2)))
data_influence_edges <- data_influence_transformed %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to, weight) %>%
data_artist_vertices <- data_artist %>%
rename(name=artist_name) %>%
relocate(artist_id)
# Nat King Cole
filter_idx <- match("Enrique Iglesias", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Ricky Martin', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
View(data_artist)
View(data_influence)
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_artist)
View(data_artist)
View(data_influence)
View(data_music)
View(data_influence)
tranformation_1
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_influence <- data_influence %>%
mutate(follower_main_genre = str_remove_all(follower_main_genre, ';'))
artist_genre <- data_influence %>%
select(`follower_name`, `follower_main_genre`) %>%
unique() %>%
rename(`artist_names`=`follower_name`, `main_genre`=`follower_main_genre`)
data_music_genre <- data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artist_names) %>%
mutate(artist_names = gsub('^.|.$', '', artist_names)) %>%
inner_join(artist_genre, by="artist_names")
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=3)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_artist$PC2 <- predict(tranformation_1, data)[['PC2']]
data_artist$PC3 <- predict(tranformation_1, data)[['PC3']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = dist(matrix(c(`PC1_influencer`, `PC1_follower`, `PC2_influencer`, `PC2_follower`, `PC3_influencer`, `PC3_follower`), nrow = 2)))
tranformation_1
tranformation_1$rotation
summary(trasformation_1)
summary(tranformation_1)

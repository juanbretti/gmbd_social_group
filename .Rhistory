# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
# Value = 'width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
# Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
V(network)
V(network)
V(network)$degree
g_ego
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = (1E-2)*V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
network <- g_ego
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
zoom = TRUE,
opacityNoHover = 1
)
g_ego
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_artist)
data_influence <- read_csv('data/influence_data.csv')
View(data_influence)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv', encoding)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_influence)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id) %>%
dplyr::filter(grepl(',', artist_names))
aa <- data_music %>%
dplyr::filter(grepl(',', artist_names)) %>%
select(`artist_names`, `artists_id`) %>%
distinct()
# aa %>%
#   transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
#             artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
#   unnest(artists_id, artist_names)
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=3)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_artist$PC2 <- predict(tranformation_1, data)[['PC2']]
data_artist$PC3 <- predict(tranformation_1, data)[['PC3']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = dist(matrix(c(`PC1_influencer`, `PC1_follower`, `PC2_influencer`, `PC2_follower`, `PC3_influencer`, `PC3_follower`), nrow = 2)))
data_influence_edges <- data_influence_transformed %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to, weight) %>%
data_artist_vertices <- data_artist %>%
rename(name=artist_name) %>%
relocate(artist_id)
# Nat King Cole
filter_idx <- match("Enrique Iglesias", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Ricky Martin', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
View(data_artist)
View(data_influence)
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
View(data_artist)
View(data_artist)
View(data_influence)
View(data_music)
View(data_influence)
tranformation_1
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_influence <- data_influence %>%
mutate(follower_main_genre = str_remove_all(follower_main_genre, ';'))
artist_genre <- data_influence %>%
select(`follower_name`, `follower_main_genre`) %>%
unique() %>%
rename(`artist_names`=`follower_name`, `main_genre`=`follower_main_genre`)
data_music_genre <- data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artist_names) %>%
mutate(artist_names = gsub('^.|.$', '', artist_names)) %>%
inner_join(artist_genre, by="artist_names")
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=3)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_artist$PC2 <- predict(tranformation_1, data)[['PC2']]
data_artist$PC3 <- predict(tranformation_1, data)[['PC3']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = dist(matrix(c(`PC1_influencer`, `PC1_follower`, `PC2_influencer`, `PC2_follower`, `PC3_influencer`, `PC3_follower`), nrow = 2)))
tranformation_1
tranformation_1$rotation
summary(trasformation_1)
summary(tranformation_1)
shiny::runApp('shiny')
View(data_artist)
View(data_artist)
runApp('shiny')
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
theme_set(theme_minimal(base_size = 20))
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_influence <- data_influence %>%
mutate(follower_main_genre = str_remove_all(follower_main_genre, ';'))
artist_genre <- data_influence %>%
select(`follower_name`, `follower_main_genre`) %>%
unique() %>%
rename(`artist_names`=`follower_name`, `main_genre`=`follower_main_genre`)
data_music_genre <- data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ","),
artist_names = strsplit(str_trim(str_remove_all(artist_names, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artist_names) %>%
mutate(artist_names = gsub('^.|.$', '', artist_names)) %>%
inner_join(artist_genre, by="artist_names")
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=3)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_artist$PC2 <- predict(tranformation_1, data)[['PC2']]
data_artist$PC3 <- predict(tranformation_1, data)[['PC3']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1', 'PC2', 'PC3')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = dist(matrix(c(`PC1_influencer`, `PC1_follower`, `PC2_influencer`, `PC2_follower`, `PC3_influencer`, `PC3_follower`), nrow = 2)))
vars <- apply(tranformation_1$rotation, 2, var)
vars/sum(vars)
pc1 <- sum(tranformation_1$rotation[,1])
pc2 <- sum(tranformation_1$rotation[,2])
pc3 <- sum(tranformation_1$rotation[,3])
pc1/sum(pc1+pc2+pc3)
data_influence_edges <- data_influence_transformed %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to, weight)
data_artist_vertices <- data_artist %>%
rename(name=artist_name) %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
# https://stackoverflow.com/questions/44892923/how-to-increase-length-of-edges-when-plotting-a-graph-in-r
# https://stackoverflow.com/questions/32012080/changing-the-spacing-between-vertices-in-igraph-in-r
# test.layout <- layout_(g, with_dh(weight.edge.lengths = edge_density(g)/1000))
# plot(g, layout = test.layout)
# plot(g)
top_ <- 5
sorted_music_genre <- data_music_genre %>%
group_by(`main_genre`) %>%
tally() %>%
arrange(desc(n)) %>%
select(`main_genre`) %>%
unlist(use.names=FALSE)
data_music_genre %>%
mutate(main_genre = factor(main_genre, levels=sorted_music_genre)) %>%
filter(main_genre %in% sorted_music_genre[1:top_]) %>%
group_by(`year`, `main_genre`) %>%
summarise(mean=mean(duration_ms)/1000/60) %>%
ggplot(aes(x=`year`, y=`mean`, color=`main_genre`)) +
geom_line() +
ylim(c(1.5, 5)) +
labs(title='Song duration over time per genre', x=NULL, y='Minutes', color='Genre')+
theme_light()
data_music_genre %>%
mutate(main_genre = factor(main_genre, levels=sorted_music_genre)) %>%
filter(main_genre %in% sorted_music_genre[1:top_]) %>%
ggplot(aes(x=`year`, y=`duration_ms`/1000/60)) +
geom_smooth(aes(color=`main_genre`), method="lm", formula=y~poly(x, 3, raw=TRUE)) +
ylim(c(0, 5)) +
labs(title='Song duration over time', x=NULL, y='Minutes', color='Genre') +
theme_light()
data_music_genre %>%
mutate(main_genre = factor(main_genre, levels=sorted_music_genre)) %>%
filter(main_genre %in% sorted_music_genre[1:top_]) %>%
ggplot(aes(x=`year`, y=`tempo`)) +
geom_smooth(aes(color=`main_genre`), method="lm", formula=y~poly(x, 3, raw=TRUE)) +
# ylim(c(0, 5)) +
labs(title='Song tempo over time', x=NULL, y='Tempo', color='Genre')
top_influencers_ <- 5
data_influence_sorted <- data_influence %>%
group_by(`influencer_name`) %>%
tally() %>%
arrange(desc(n)) %>%
select(`influencer_name`) %>%
unlist(use.names=FALSE)
data_influence %>%
mutate(influencer_name = factor(influencer_name, levels=data_influence_sorted)) %>%
dplyr::filter(influencer_name %in% data_influence_sorted[1:top_]) %>%
group_by(`influencer_name`) %>%
tally() %>%
ggplot(aes(x=`influencer_name`, y=`n`)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits = rev) +
labs(title='Top influencer artists', x=NULL, y='Number of influenced')
data_influence %>%
mutate(follower_main_genre = factor(follower_main_genre, levels=sorted_music_genre)) %>%
filter(follower_main_genre %in% sorted_music_genre[1:top_]) %>%
group_by(`follower_main_genre`, `influencer_name`) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1:top_influencers_) %>%
ggplot(aes(x=reorder(`influencer_name`, -n, sum), y=`n`)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_x_discrete(limits = rev) +
facet_wrap(`follower_main_genre` ~ ., scales="free_y") +
labs(title='Top influencer artists by genre', x=NULL, y='Number of influenced')
data_influence %>%
mutate(influencer_main_genre = factor(influencer_main_genre, levels=sorted_music_genre),
follower_main_genre = factor(follower_main_genre, levels=sorted_music_genre)) %>%
filter(influencer_main_genre %in% sorted_music_genre[1:top_], follower_main_genre %in% sorted_music_genre[1:top_]) %>%
group_by(`influencer_main_genre`, `follower_main_genre`) %>%
tally() %>%
ggplot(aes(x=reorder(`influencer_main_genre`, -n, sum), y=reorder(`follower_main_genre`, -n, sum), fill=log(`n`))) +
geom_tile() +
scale_x_discrete(guide = guide_axis(angle = 90)) +
labs(title='Source of inspiration by genre', x='Influencer', y='Follower', fill=NULL) +
scale_fill_gradient(low="#F2D544", high="#025959")
gorder(g)
gsize(g)
deg <- degree(g, mode="all", loop=FALSE)
hist(deg, main='Total degree distribution')
summary(deg)
diameter(g)
mean_distance(g)
# https://stackoverflow.com/a/55891333/3780957
g_components <- components(g, mode="strong")
biggest_component <- which.max(g_components$csize)
g_main <- induced_subgraph(g, which(g_components$membership == biggest_component))
cl <- closeness(g_main, normalized=TRUE)
head(sort(cl, decreasing=TRUE), 5)
dg <- degree(g, mode = "total", loop=FALSE, normalized=TRUE)
bt <- betweenness(g, normalized=TRUE)
cl <- closeness(g, normalized=TRUE)
pr <- page_rank(g)$vector
cat('Degree\n')
head(sort(dg, decreasing=TRUE), 5)
cat('\n\nBetweenness\n')
head(sort(bt, decreasing=TRUE), 5)
cat('\n\nCloseness\n')
head(sort(cl, decreasing=TRUE), 5)
cat('\n\nPage Rank\n')
head(sort(pr, decreasing=TRUE), 5)
results <- data.frame(Degree=dg, Betweenness=bt, Closeness=cl, `Page Rank`=pr)
chart.Correlation(results, histogram=TRUE, pch=19)
top_betweenness <- head(sort(bt, decreasing=TRUE), 10)
data_artist_vertices$bt <- bt
data_artist_vertices %>%
filter(`name` %in% names(top_betweenness)) %>%
select(`name`, `popularity`, `count`) %>%
arrange(factor(`name`, levels = names(top_betweenness))) %>%
rename(`Artist name` = `name`, `Popularity` = `popularity`, `Number of songs` = `count`)
# Communities can only be calculated for undirected graphs
g_undirected <- as.undirected(g, mode='collapse', edge.attr.comb="max")
cluster_test <- list(
# cluster_edge_betweenness=cluster_edge_betweenness(g_undirected),
cluster_fast_greedy=cluster_fast_greedy(g_undirected),
# cluster_label_prop=cluster_label_prop(g_undirected),
cluster_leading_eigen=cluster_leading_eigen(g_undirected),
cluster_louvain=cluster_louvain(g_undirected),
# cluster_optimal=cluster_optimal(g_undirected) # Super slow
# cluster_spinglass=cluster_spinglass(g), # Cannot work with unconnected graph, Invalid value
cluster_walktrap=cluster_walktrap(g_undirected),
walktrap.community=walktrap.community(g_undirected)
)
lapply(cluster_test, modularity)
g_communities <- cluster_test$cluster_louvain
modularity(g_communities)
modularity(g_communities, membership(g_communities))
length(g_communities)
hist(sizes(g_communities), main='Number of actors inside a community', xlab='Members')
x <- sapply(g_communities[], length)
summary(x)
which.max(x)
g_communities[]$`66`
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
# plot(g1)
# Nat King Cole
filter_idx <- match("Enrique Iglesias", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Ricky Martin', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot_network_3D <- function(network, arrow=TRUE) {
# Store the degree.
V(network)$degree <- strength(graph = network)
# Create networkD3 object.
network.D3 <- igraph_to_networkD3(g = network)
# Define node size.
network.D3$nodes <- network.D3$node %>% mutate(Degree = V(network)$degree, Group = 1)
# Define edges width.
network.D3$links$Width <- 1
forceNetwork(
Links = network.D3$links,
Nodes = network.D3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
Group = 'Group',
opacity = 0.9,
Value = 'Width',
Nodesize = 'Degree',
# We input a JavaScript function.
linkWidth = JS("function(d) { return Math.sqrt(d.value); }"),
fontSize = 12,
arrows = arrow,
zoom = TRUE,
opacityNoHover = 1
)
}
plot(g_ego, edge.arrow.size=.2)
plot_network_3D(g_ego)
short <- all_shortest_paths(g, from='Enrique Iglesias', to = 'Wolfgang Amadeus Mozart', mode = "all")
g1 <- induced_subgraph(g, short$res[[1]])
plot(g1)
plot_network_3D(g1)
g_undirected <- as.undirected(g_ego, mode='collapse', edge.attr.comb="max")
wc <- cluster_louvain(g_undirected)
layout <-layout.fruchterman.reingold(g_ego)
par(mar=c(0,0,0,0)+.1)
plot(wc, g_ego, layout=layout, vertex.size=5,  edge.arrow.size=.2)
hrg <- fit_hrg(g_ego)
hrg
g_ego_predicted <- predict_edges(g_ego, hrg=hrg)
g_ego_predicted
knitr::opts_chunk$set(message = FALSE, echo=TRUE, warning=FALSE)
#install.packages("tidyverse")
#install.packages("igraph")
#install.packages("caret")
#install.packages("PerformanceAnalytics")
#install.packages("networkD3")
library(tidyverse)
library(igraph)
library(caret)
library(PerformanceAnalytics)
library(networkD3)
theme_set(theme_minimal(base_size = 20))
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_influence
View(data_influence)

library(tidyverse)
library(igraph)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
head(sort(table(data_music['artist_names']), decreasing =FALSE), 5)
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
a <- unique(data_artist['artist_id'])
b <- unique(data_influence['influencer_id'])
c <- unique(data_influence['follower_id'])
table(unlist(b) %in% unlist(a))
table(unlist(c) %in% unlist(a))
unknown_artist <- c[!(unlist(c) %in% unlist(a)),]
data_influence_edges <- data_influence %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to) %>%
filter(!(to %in% unknown_artist))
data_artist_vertices <- data_artist %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
# https://stackoverflow.com/questions/44892923/how-to-increase-length-of-edges-when-plotting-a-graph-in-r
# https://stackoverflow.com/questions/32012080/changing-the-spacing-between-vertices-in-igraph-in-r
# test.layout <- layout_(g, with_dh(weight.edge.lengths = edge_density(g)/1000))
# plot(g, layout = test.layout)
plot(g)
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
library(tidyverse)
library(igraph)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
head(sort(table(data_music['artist_names']), decreasing =FALSE), 5)
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
data_influence_edges <- data_influence %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to) %>%
filter(!(to %in% unknown_artist))
data_artist_vertices <- data_artist %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
data_artist_vertices
g1 <- delete_vertices(g, V(g)$danceability >= 0.5)
g1 <- delete_vertices(g, V(g)$danceability >= 0.5)
plot(g1)
g1 <- delete_vertices(g, V(g)$danceability >= 0.8)
plot(g1)
g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
plot(g1)
V(g)$danceability >= 0.9
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(graph, V(g)$danceability >= 0.9)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.9)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.6)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.7)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.8)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.9)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 120)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 130)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
g1 <- induced_subgraph(g, V(g)$from == 792507)
plot(g1)
V(g)$from == 792507
V(g)$from == 66915
V(g)$from
E(g)$from == 66915
E(g)$from
E(g)
E(g)
from(V(g))
E(g)
E(g)[from(V(g))]
E(g)[from(V(g))==66915]
from(V(g))==66915
E(g)[from(0)]
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
g1 <- induced_subgraph(g, E(g)[from(66915)])
V(g)
V(g)$name
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
g1 <- induced_subgraph(g, E(g) [ from(idx) ])
idx
E(g)[from(idx)]
E(g)[from(idx)]
E(g)[from(idx)]
E(g)[from(idx)]
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
g1 <- E(g)[from(idx)]
plot(g1)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
g1 <- induced_subgraph(g, vids=E(g)[from(idx)])
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
g1 <- induced_subgraph(g, vids=E(g)[from(idx)]$id)
plot(g1)
E(g)[from(idx)]$id
E(g)[from(idx)]
E(g)[from(idx)]$names
E(g)[from(idx)]$name
E(g)[from(idx)]
names(E(g)[from(idx)])
name(E(g)[from(idx)])
values(E(g)[from(idx)])
E(g)[from(idx)]
aa <- E(g)[from(idx)]
aa <- as.numeric(E(g)[from(idx)])
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
g1 <- induced_subgraph(g, vids=names(E(g)[from(idx)])
aa <- as.numeric(E(g)[from(idx)])
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
# g1 <- induced_subgraph(g, vids=names(E(g)[from(idx)])
aa <- as.numeric(E(g)[from(idx)])
g1 <- induced_subgraph(g, vids=aa)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
# g1 <- induced_subgraph(g, vids=names(E(g)[from(idx)])
aa <- as.numeric(E(g)[from(idx)])
g1 <- induced_subgraph(g, aa)
aa
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
# g1 <- induced_subgraph(g, vids=names(E(g)[from(idx)])
aa <- as.numeric(E(g)[from(idx)])
g1 <- subgraph.edges(graph, aa, delete.vertices = TRUE)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
idx <- match("66915", V(g)$name)
# g1 <- induced_subgraph(g, vids=names(E(g)[from(idx)])
aa <- as.numeric(E(g)[from(idx)])
g1 <- subgraph.edges(g, aa, delete.vertices = TRUE)
plot(g1)
filter_idx <- match("317093", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
library(tidyverse)
library(igraph)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
head(sort(table(data_music['artist_names']), decreasing =FALSE), 5)
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
data_influence_edges <- data_influence %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to) %>%
filter(!(to %in% unknown_artist))
data_artist_vertices <- data_artist %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
# https://stackoverflow.com/questions/44892923/how-to-increase-length-of-edges-when-plotting-a-graph-in-r
# https://stackoverflow.com/questions/32012080/changing-the-spacing-between-vertices-in-igraph-in-r
# test.layout <- layout_(g, with_dh(weight.edge.lengths = edge_density(g)/1000))
# plot(g, layout = test.layout)
# plot(g)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
g_ego <- make_ego_graph(g, order = 2, nodes = '317093', mode = "all", mindist = 0)
plot(g_ego[[1]])
g_ego <- make_ego_graph(g, order = 1, nodes = '625201', mode = "all", mindist = 0)
plot(g_ego[[1]])
g_ego
g_ego <- make_ego_graph(g, order = 1, nodes = '625201', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, labels=artist_name)
g_ego <- make_ego_graph(g, order = 1, nodes = '625201', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, labels='artist_name')
data_influence_edges <- data_influence %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to) %>%
filter(!(to %in% unknown_artist))
data_artist_vertices <- data_artist %>%
rename(name=artist_name) %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
g_ego <- make_ego_graph(g, order = 1, nodes = '625201', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = '625201', mode = "all", mindist = 0)
g
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.5)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 2, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Thalia', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = '24hrs', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Ty Dollar $ign', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = '24hrs', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Ty Dolla $ign', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
# Nat King Cole
filter_idx <- match("Madonna", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
plot(g1)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Steffan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Stefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 2, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[2]]
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 2, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 2, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[2]]
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
library(tidyverse)
library(igraph)
library(caret)
data_music <- read_csv('data/full_music_data.csv')
data_influence <- read_csv('data/influence_data.csv')
data_artist <- read_csv('data/data_by_artist.csv')
data_music %>%
transform(artists_id = strsplit(str_trim(str_remove_all(artists_id, '[\\[\\]]'), side='both'), ",")) %>%
unnest(artists_id)
# dplyr::filter(grepl(',', artist_names))
unique_a <- unique(data_artist['artist_id'])
unique_b <- unique(data_influence['influencer_id'])
unique_c <- unique(data_influence['follower_id'])
table(unlist(unique_b) %in% unlist(unique_a))
table(unlist(unique_c) %in% unlist(unique_a))
unknown_artist <- unique_c[!(unlist(unique_c) %in% unlist(unique_a)),]
# colnames(data_artist)
columns_to_normalize <- c("danceability", "energy", "valence", "tempo", "loudness", "mode", "key", "acousticness", "instrumentalness", "liveness", "speechiness", "duration_ms", "popularity", "count")
data <- data_artist[, columns_to_normalize]
tranformation_1 <- preProcess(data, method=c("scale", "pca"), pcaComp=1)
data_artist$PC1 <- predict(tranformation_1, data)[['PC1']]
data_influence_transformed <- data_influence %>%
inner_join(data_artist[, c('artist_id', 'PC1')], by = c("influencer_id" = "artist_id")) %>%
inner_join(data_artist[, c('artist_id', 'PC1')], by = c("follower_id" = "artist_id"), suffix = c("_influencer", "_follower")) %>%
rowwise() %>%
mutate(`weight` = mean(c(`PC1_influencer`, `PC1_follower`)))
# Normalize to greater than `0`
data_influence_transformed['weight'] <- (data_influence_transformed['weight']-min(data_influence_transformed['weight']))
data_influence_transformed['weight'] <- data_influence_transformed['weight']/max(data_influence_transformed['weight'])+0.1
data_influence_edges <- data_influence_transformed %>%
rename(from=influencer_id, to=follower_id) %>%
relocate(from, to, weight) %>%
filter(!(to %in% unknown_artist))
data_artist_vertices <- data_artist %>%
rename(name=artist_name) %>%
relocate(artist_id)
g <- graph_from_data_frame(d=data_influence_edges, vertices=data_artist_vertices, directed=TRUE)
# https://stackoverflow.com/questions/44892923/how-to-increase-length-of-edges-when-plotting-a-graph-in-r
# https://stackoverflow.com/questions/32012080/changing-the-spacing-between-vertices-in-igraph-in-r
# test.layout <- layout_(g, with_dh(weight.edge.lengths = edge_density(g)/1000))
# plot(g, layout = test.layout)
# plot(g)
# g1 <- delete_vertices(g, V(g)$danceability >= 0.9)
g1 <- induced_subgraph(g, V(g)$danceability >= 0.85)
g1 <- induced_subgraph(g, V(g)$tempo >= 180)
# plot(g1)
# Nat King Cole
filter_idx <- match("Madonna", V(g)$name)
filter_edges <- as.numeric(E(g)[from(filter_idx)])
g1 <- subgraph.edges(g, filter_edges, delete.vertices = TRUE)
# plot(g1)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
gorder(g)
gsize(g)
deg <- degree(g, mode="all", loop=FALSE)
hist(deg, main='Total degree distribution')
summary(deg)
diameter(g)
mean_distance(g)
# https://stackoverflow.com/a/55891333/3780957
g_components <- components(g, mode="strong")
biggest_component <- which.max(g_components$csize)
g_main <- induced_subgraph(g, which(g_components$membership == biggest_component))
cl <- closeness(g_main, normalized=TRUE)
head(sort(cl, decreasing=TRUE), 5)
dg <- degree(g, mode = "total", loop=FALSE, normalized=TRUE)
bt <- betweenness(g, normalized=TRUE)
cl <- closeness(g, normalized=TRUE)
cat('Degree\n')
head(sort(dg, decreasing=TRUE), 5)
cat('\n\nBetweenness\n')
head(sort(bt, decreasing=TRUE), 5)
cat('\n\nCloseness\n')
head(sort(cl, decreasing=TRUE), 5)
library("PerformanceAnalytics")
results <- data.frame(Degree=dg, Betweenness=bt, Closeness=cl)
chart.Correlation(results, histogram=TRUE, pch=19)
top_betweenness <- head(sort(bt, decreasing=TRUE), 10)
data_artist_vertices$bt <- bt
data_artist_vertices %>%
filter(`name` %in% names(top_betweenness)) %>%
select(`name`, `popularity`, `count`) %>%
arrange(factor(`name`, levels = names(top_betweenness))) %>%
rename(`Artist name` = `name`, `Popularity` = `popularity`, `Number of songs` = `count`)
# Communities can only be calculated for undirected graphs
g_undirected <- as.undirected(g, mode='collapse', edge.attr.comb="max")
# Calculate the weight, using the distance in years between the follower and influencer
# E(g_undirected)$weight = E(g_undirected)$follower_active_start - E(g_undirected)$influencer_active_start
cluster_spinglass(g_undirected)
cluster_spinglass(g)
cluster_louvain(g_undirected)
cluster_spinglass(g)
cluster_leading_eigen(g_undirected)
cluster_walktrap(g_undirected)
cluster_test <- list(
# cluster_edge_betweenness=cluster_edge_betweenness(g_undirected),
cluster_fast_greedy=cluster_fast_greedy(g_undirected),
# cluster_label_prop=cluster_label_prop(g_undirected),
cluster_leading_eigen=cluster_leading_eigen(g_undirected),
cluster_louvain=cluster_louvain(g_undirected),
# cluster_optimal=cluster_optimal(g_undirected) # Super slow
# cluster_spinglass=cluster_spinglass(g), # Cannot work with unconnected graph, Invalid value
cluster_walktrap=cluster_walktrap(g_undirected)
)
lapply(cluster_test, modularity)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Gloria Estefan', mode = "all", mindist = 0)
g_ego <- make_ego_graph(g, order = 1, nodes = 'Enrique Iglesias', mode = "all", mindist = 0)
# g_ego <- make_ego_graph(g, order = 1, nodes = 'Madonna', mode = "all", mindist = 0)
g_ego <- g_ego[[1]]
plot(g_ego, edge.arrow.size=.2)
